// filepath: d:\WORK\application\src\App.jsx
import React, { useEffect, useState } from 'react';
import { 
  Box, 
  CssBaseline, 
  Toolbar, 
  AppBar, 
  Typography, 
  Button,
  CircularProgress
} from '@mui/material';
import VideoLibraryIcon from '@mui/icons-material/VideoLibrary';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import SettingsIcon from '@mui/icons-material/Settings';
import InsightsIcon from '@mui/icons-material/Insights';
import AddIcon from '@mui/icons-material/Add';
import { 
  BrowserRouter as Router, 
  Routes, 
  Route, 
  Navigate, 
  useNavigate, 
  useLocation,
  Link
} from 'react-router-dom';

// Importation des pages
import VideosPage from './pages/videos/VideosPage';
import VideoDetailPage from './pages/videos/VideoDetailPage';
import AccountsPage from './pages/accounts/AccountsPage';
import SettingsPage from './pages/settings/SettingsPage';
import DashboardPage from './pages/insights/InsightsPage';
import LoginPage from './pages/LoginPage';

// Importation des composants de dialogue
import VideoDialog from './components/VideoDialog';
import AccountDialog from './components/AccountDialog';

const TABS = [
  { label: 'Dashboard', icon: <InsightsIcon />, path: '/dashboard' },
  { label: 'Vidéos', icon: <VideoLibraryIcon />, path: '/videos' },
  { label: 'Comptes', icon: <AccountCircleIcon />, path: '/accounts' },
  { label: 'Paramètres', icon: <SettingsIcon />, path: '/settings' },
];

// URL de l'API
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

function App() {
  const [token, setToken] = useState(() => localStorage.getItem('token') || '');
  const [loginError, setLoginError] = useState('');

  useEffect(() => {
    if (token) localStorage.setItem('token', token);
    else localStorage.removeItem('token');
  }, [token]);

  async function login(username, password) {
    setLoginError('');
    try {
      const res = await fetch(`${API_URL}/api/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });
      if (!res.ok) throw new Error('Identifiants invalides');
      const data = await res.json();
      setToken(data.token);
    } catch (e) {
      setLoginError(e.message || 'Erreur de connexion');
    }
  }

  if (!token) {
    return <LoginPage onLogin={login} error={loginError} />;
  }

  return (
    <Router>
      <AppContent token={token} setToken={setToken} apiUrl={API_URL} />
    </Router>
  );
}

// Composant principal contenant le contenu de l'application
function AppContent({ token, setToken, apiUrl }) {
  const [tab, setTab] = useState(0);
  const [accounts, setAccounts] = useState([]);
  const [videos, setVideos] = useState([]);
  const [workInfo, setWorkInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [openAddVideo, setOpenAddVideo] = useState(false);
  const [openAddAccount, setOpenAddAccount] = useState(false);
  const [newAccount, setNewAccount] = useState({ 
    platform: '', 
    name: '', 
    username: '', 
    description: '', 
    language: '', 
    appId: '', 
    accessToken: '' 
  });
  const [newVideo, setNewVideo] = useState({ 
    title: '', 
    link: '', 
    status: '', 
    platforms_uploaded: [] 
  });

  const navigate = useNavigate();
  const location = useLocation();
  
  // Mise à jour de l'onglet actif en fonction de l'URL
  useEffect(() => {
    const path = '/' + location.pathname.split('/')[1];
    const tabIndex = TABS.findIndex(tab => tab.path === path);
    if (tabIndex !== -1) {
      setTab(tabIndex);
    }
  }, [location.pathname]);
  
  // Chargement des données
  useEffect(() => {
    fetchAll();
  }, [token]);
  
  // Récupération des données API
  async function fetchAll() {
    setLoading(true);
    const headers = token ? { Authorization: `Bearer ${token}` } : {};
    
    try {
      const [accRes, vidRes, infoRes] = await Promise.all([
        fetch(`${apiUrl}/api/social-accounts`, { headers }),
        fetch(`${apiUrl}/api/videos`, { headers }),
        fetch(`${apiUrl}/api/work-info`, { headers }),
      ]);
      
      const accountsData = await accRes.json();
      const videosData = await vidRes.json();
      const workInfoData = await infoRes.json();
      
      setAccounts(accountsData);
      setVideos(videosData);
      setWorkInfo(workInfoData);
    } catch (error) {
      console.error('Erreur lors de la récupération des données:', error);
    } finally {
      setLoading(false);
    }
  }
  
  return (
    <Box sx={{ 
      display: 'flex', 
      bgcolor: '#ffffff', 
      minHeight: '100vh', 
      width: '100%', 
      position: 'absolute', 
      top: 0, 
      bottom: 0, 
      left: 0, 
      right: 0,
      overflow: 'hidden' 
    }}>
      <CssBaseline />
      
      <AppBar position="fixed" sx={{ 
        zIndex: (theme) => theme.zIndex.drawer + 1, 
        bgcolor: '#ffffff', 
        boxShadow: '0 2px 8px 0 rgba(0, 0, 0, 0.05)', 
        borderBottom: '1px solid #e5e7eb' 
      }}>
        <Toolbar sx={{ px: 4, minHeight: 64 }}>
          <Typography 
            variant="h5" 
            noWrap 
            sx={{ 
              flexGrow: 0, 
              color: '#22223b', 
              fontWeight: 800, 
              mr: 4, 
              letterSpacing: 1 
            }}
          >
            Social Video Manager
          </Typography>
          
          {/* Navigation principale */}
          <Box sx={{ flexGrow: 1 }}>
            <Box sx={{ display: 'flex', gap: 2 }}>
              {TABS.map((tabItem, idx) => (
                <Button
                  key={tabItem.label}
                  component={Link}
                  to={tabItem.path}
                  startIcon={tabItem.icon}
                  sx={{
                    color: tab === idx ? '#18181b' : '#64748b',
                    bgcolor: tab === idx ? '#f3f4f6' : 'transparent',
                    fontWeight: tab === idx ? 700 : 600,
                    borderRadius: 3,
                    px: 3,
                    py: 1.5,
                    fontSize: '1rem',
                    textTransform: 'none',
                    boxShadow: 'none',
                    '&:hover': { bgcolor: '#f1f5f9', color: '#18181b' }
                  }}
                >
                  {tabItem.label}
                </Button>
              ))}
            </Box>
          </Box>
          
          {/* Bouton de déconnexion */}
          <Button 
            onClick={() => setToken('')} 
            sx={{ 
              ml: 2, 
              bgcolor: '#f3f4f6', 
              color: '#18181b', 
              borderRadius: 3, 
              px: 3, 
              py: 1, 
              fontWeight: 600, 
              textTransform: 'none', 
              '&:hover': { bgcolor: '#f87171', color: '#fff' } 
            }}
          >
            Se déconnecter
          </Button>
          
          {/* Boutons d'ajout en fonction de la page active */}
          {tab === 1 && (
            <Button 
              variant="contained" 
              sx={{ 
                bgcolor: '#e5e7eb', 
                color: '#18181b', 
                textTransform: 'none', 
                fontWeight: 600, 
                borderRadius: 3, 
                px: 4, 
                py: 1.5, 
                ml: 2, 
                boxShadow: 'none', 
                '&:hover': { bgcolor: '#f1f5f9' } 
              }} 
              startIcon={<AddIcon />} 
              onClick={() => setOpenAddVideo(true)}
            >
              Ajouter une vidéo
            </Button>
          )}
          
          {tab === 2 && (
            <Button 
              variant="contained" 
              sx={{ 
                bgcolor: '#e5e7eb', 
                color: '#18181b', 
                textTransform: 'none', 
                fontWeight: 600, 
                borderRadius: 3, 
                px: 4, 
                py: 1.5, 
                ml: 2, 
                boxShadow: 'none', 
                '&:hover': { bgcolor: '#f1f5f9' } 
              }} 
              startIcon={<AddIcon />} 
              onClick={() => setOpenAddAccount(true)}
            >
              Ajouter un compte
            </Button>
          )}
        </Toolbar>
      </AppBar>
      
      {/* Contenu principal */}
      <Box component="main" sx={{ 
        flexGrow: 1, 
        bgcolor: '#ffffff', 
        minHeight: '100vh', 
        height: '100vh', 
        overflow: 'auto', 
        display: 'flex', 
        flexDirection: 'column', 
        width: '100%',
      }}>
        <Toolbar />
        
        <Box sx={{ 
          flexGrow: 1, 
          width: '100%', 
          minHeight: 'calc(100vh - 64px)', 
          p: 0, 
          maxWidth: '100%', 
          overflowX: 'hidden',
          overflowY: 'auto',
          bgcolor: '#fff',
        }}>
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
              <CircularProgress />
            </Box>
          ) : (
            <Routes>
              <Route path="/" element={<Navigate replace to="/dashboard" />} />
              <Route path="/dashboard" element={<DashboardPage info={workInfo} />} />
              <Route path="/videos" element={<VideosPage videos={videos} fetchAll={fetchAll} />} />
              <Route path="/videos/:id" element={<VideoDetailPage />} />
              <Route path="/accounts" element={<AccountsPage accounts={accounts} fetchAll={fetchAll} />} />
              <Route path="/settings" element={<SettingsPage />} />
              <Route path="*" element={<Navigate replace to="/dashboard" />} />
            </Routes>
          )}
        </Box>
      </Box>
      
      {/* Dialogues modaux */}
      <VideoDialog 
        open={openAddVideo}
        onClose={() => setOpenAddVideo(false)}
        video={newVideo}
        onSave={async (video) => {
          setOpenAddVideo(false);
          setNewVideo({ title: '', link: '', status: '', platforms_uploaded: [] });
          await fetch(`${apiUrl}/api/videos`, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json', 
              'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify(video)
          });
          fetchAll();
        }}
      />

      <AccountDialog 
        open={openAddAccount}
        onClose={() => setOpenAddAccount(false)}
        account={newAccount}
        onSave={async (account) => {
          setOpenAddAccount(false);
          setNewAccount({ 
            platform: '', 
            name: '', 
            username: '', 
            description: '', 
            language: '', 
            appId: '', 
            accessToken: '' 
          });
          await fetch(`${apiUrl}/api/social-accounts`, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json', 
              'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify(account)
          });
          fetchAll();
        }}
      />
    </Box>
  );
}

export default App;
